// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/dSpace.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct CallRequest {
    // message fields
    pub To: ::std::string::String,
    pub Data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CallRequest {
    fn default() -> &'a CallRequest {
        <CallRequest as ::protobuf::Message>::default_instance()
    }
}

impl CallRequest {
    pub fn new() -> CallRequest {
        ::std::default::Default::default()
    }

    // string To = 1;


    pub fn get_To(&self) -> &str {
        &self.To
    }
    pub fn clear_To(&mut self) {
        self.To.clear();
    }

    // Param is passed by value, moved
    pub fn set_To(&mut self, v: ::std::string::String) {
        self.To = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_To(&mut self) -> &mut ::std::string::String {
        &mut self.To
    }

    // Take field
    pub fn take_To(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.To, ::std::string::String::new())
    }

    // string Data = 2;


    pub fn get_Data(&self) -> &str {
        &self.Data
    }
    pub fn clear_Data(&mut self) {
        self.Data.clear();
    }

    // Param is passed by value, moved
    pub fn set_Data(&mut self, v: ::std::string::String) {
        self.Data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Data(&mut self) -> &mut ::std::string::String {
        &mut self.Data
    }

    // Take field
    pub fn take_Data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CallRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.To)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.To.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.To);
        }
        if !self.Data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.To.is_empty() {
            os.write_string(1, &self.To)?;
        }
        if !self.Data.is_empty() {
            os.write_string(2, &self.Data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallRequest {
        CallRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "To",
                |m: &CallRequest| { &m.To },
                |m: &mut CallRequest| { &mut m.To },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Data",
                |m: &CallRequest| { &m.Data },
                |m: &mut CallRequest| { &mut m.Data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CallRequest>(
                "CallRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CallRequest {
        static instance: ::protobuf::rt::LazyV2<CallRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CallRequest::new)
    }
}

impl ::protobuf::Clear for CallRequest {
    fn clear(&mut self) {
        self.To.clear();
        self.Data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CallResponse {
    // message fields
    pub Response: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CallResponse {
    fn default() -> &'a CallResponse {
        <CallResponse as ::protobuf::Message>::default_instance()
    }
}

impl CallResponse {
    pub fn new() -> CallResponse {
        ::std::default::Default::default()
    }

    // string Response = 1;


    pub fn get_Response(&self) -> &str {
        &self.Response
    }
    pub fn clear_Response(&mut self) {
        self.Response.clear();
    }

    // Param is passed by value, moved
    pub fn set_Response(&mut self, v: ::std::string::String) {
        self.Response = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Response(&mut self) -> &mut ::std::string::String {
        &mut self.Response
    }

    // Take field
    pub fn take_Response(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Response, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CallResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Response.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Response.is_empty() {
            os.write_string(1, &self.Response)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallResponse {
        CallResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Response",
                |m: &CallResponse| { &m.Response },
                |m: &mut CallResponse| { &mut m.Response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CallResponse>(
                "CallResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CallResponse {
        static instance: ::protobuf::rt::LazyV2<CallResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CallResponse::new)
    }
}

impl ::protobuf::Clear for CallResponse {
    fn clear(&mut self) {
        self.Response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendRequest {
    // message fields
    pub To: ::std::string::String,
    pub Data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendRequest {
    fn default() -> &'a SendRequest {
        <SendRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendRequest {
    pub fn new() -> SendRequest {
        ::std::default::Default::default()
    }

    // string To = 1;


    pub fn get_To(&self) -> &str {
        &self.To
    }
    pub fn clear_To(&mut self) {
        self.To.clear();
    }

    // Param is passed by value, moved
    pub fn set_To(&mut self, v: ::std::string::String) {
        self.To = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_To(&mut self) -> &mut ::std::string::String {
        &mut self.To
    }

    // Take field
    pub fn take_To(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.To, ::std::string::String::new())
    }

    // string Data = 2;


    pub fn get_Data(&self) -> &str {
        &self.Data
    }
    pub fn clear_Data(&mut self) {
        self.Data.clear();
    }

    // Param is passed by value, moved
    pub fn set_Data(&mut self, v: ::std::string::String) {
        self.Data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Data(&mut self) -> &mut ::std::string::String {
        &mut self.Data
    }

    // Take field
    pub fn take_Data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.To)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.To.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.To);
        }
        if !self.Data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.To.is_empty() {
            os.write_string(1, &self.To)?;
        }
        if !self.Data.is_empty() {
            os.write_string(2, &self.Data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendRequest {
        SendRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "To",
                |m: &SendRequest| { &m.To },
                |m: &mut SendRequest| { &mut m.To },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Data",
                |m: &SendRequest| { &m.Data },
                |m: &mut SendRequest| { &mut m.Data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendRequest>(
                "SendRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendRequest {
        static instance: ::protobuf::rt::LazyV2<SendRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendRequest::new)
    }
}

impl ::protobuf::Clear for SendRequest {
    fn clear(&mut self) {
        self.To.clear();
        self.Data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendResponse {
    // message fields
    pub Response: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendResponse {
    fn default() -> &'a SendResponse {
        <SendResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendResponse {
    pub fn new() -> SendResponse {
        ::std::default::Default::default()
    }

    // string Response = 1;


    pub fn get_Response(&self) -> &str {
        &self.Response
    }
    pub fn clear_Response(&mut self) {
        self.Response.clear();
    }

    // Param is passed by value, moved
    pub fn set_Response(&mut self, v: ::std::string::String) {
        self.Response = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Response(&mut self) -> &mut ::std::string::String {
        &mut self.Response
    }

    // Take field
    pub fn take_Response(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Response, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Response.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Response.is_empty() {
            os.write_string(1, &self.Response)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendResponse {
        SendResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Response",
                |m: &SendResponse| { &m.Response },
                |m: &mut SendResponse| { &mut m.Response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendResponse>(
                "SendResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendResponse {
        static instance: ::protobuf::rt::LazyV2<SendResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendResponse::new)
    }
}

impl ::protobuf::Clear for SendResponse {
    fn clear(&mut self) {
        self.Response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiptRequest {
    // message fields
    pub TxHash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiptRequest {
    fn default() -> &'a ReceiptRequest {
        <ReceiptRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReceiptRequest {
    pub fn new() -> ReceiptRequest {
        ::std::default::Default::default()
    }

    // string TxHash = 1;


    pub fn get_TxHash(&self) -> &str {
        &self.TxHash
    }
    pub fn clear_TxHash(&mut self) {
        self.TxHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_TxHash(&mut self, v: ::std::string::String) {
        self.TxHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TxHash(&mut self) -> &mut ::std::string::String {
        &mut self.TxHash
    }

    // Take field
    pub fn take_TxHash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.TxHash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReceiptRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.TxHash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.TxHash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.TxHash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.TxHash.is_empty() {
            os.write_string(1, &self.TxHash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiptRequest {
        ReceiptRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "TxHash",
                |m: &ReceiptRequest| { &m.TxHash },
                |m: &mut ReceiptRequest| { &mut m.TxHash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiptRequest>(
                "ReceiptRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiptRequest {
        static instance: ::protobuf::rt::LazyV2<ReceiptRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiptRequest::new)
    }
}

impl ::protobuf::Clear for ReceiptRequest {
    fn clear(&mut self) {
        self.TxHash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiptRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiptRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiptResponse {
    // message fields
    pub Response: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiptResponse {
    fn default() -> &'a ReceiptResponse {
        <ReceiptResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReceiptResponse {
    pub fn new() -> ReceiptResponse {
        ::std::default::Default::default()
    }

    // string Response = 1;


    pub fn get_Response(&self) -> &str {
        &self.Response
    }
    pub fn clear_Response(&mut self) {
        self.Response.clear();
    }

    // Param is passed by value, moved
    pub fn set_Response(&mut self, v: ::std::string::String) {
        self.Response = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Response(&mut self) -> &mut ::std::string::String {
        &mut self.Response
    }

    // Take field
    pub fn take_Response(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Response, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReceiptResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Response.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Response.is_empty() {
            os.write_string(1, &self.Response)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiptResponse {
        ReceiptResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Response",
                |m: &ReceiptResponse| { &m.Response },
                |m: &mut ReceiptResponse| { &mut m.Response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiptResponse>(
                "ReceiptResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiptResponse {
        static instance: ::protobuf::rt::LazyV2<ReceiptResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiptResponse::new)
    }
}

impl ::protobuf::Clear for ReceiptResponse {
    fn clear(&mut self) {
        self.Response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiptResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiptResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAccountRequest {
    // message fields
    pub Id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAccountRequest {
    fn default() -> &'a CreateAccountRequest {
        <CreateAccountRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateAccountRequest {
    pub fn new() -> CreateAccountRequest {
        ::std::default::Default::default()
    }

    // string Id = 1;


    pub fn get_Id(&self) -> &str {
        &self.Id
    }
    pub fn clear_Id(&mut self) {
        self.Id.clear();
    }

    // Param is passed by value, moved
    pub fn set_Id(&mut self, v: ::std::string::String) {
        self.Id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Id(&mut self) -> &mut ::std::string::String {
        &mut self.Id
    }

    // Take field
    pub fn take_Id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateAccountRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Id.is_empty() {
            os.write_string(1, &self.Id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAccountRequest {
        CreateAccountRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Id",
                |m: &CreateAccountRequest| { &m.Id },
                |m: &mut CreateAccountRequest| { &mut m.Id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateAccountRequest>(
                "CreateAccountRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateAccountRequest {
        static instance: ::protobuf::rt::LazyV2<CreateAccountRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateAccountRequest::new)
    }
}

impl ::protobuf::Clear for CreateAccountRequest {
    fn clear(&mut self) {
        self.Id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAccountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAccountRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAccountResponse {
    // message fields
    pub Response: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAccountResponse {
    fn default() -> &'a CreateAccountResponse {
        <CreateAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateAccountResponse {
    pub fn new() -> CreateAccountResponse {
        ::std::default::Default::default()
    }

    // string Response = 1;


    pub fn get_Response(&self) -> &str {
        &self.Response
    }
    pub fn clear_Response(&mut self) {
        self.Response.clear();
    }

    // Param is passed by value, moved
    pub fn set_Response(&mut self, v: ::std::string::String) {
        self.Response = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Response(&mut self) -> &mut ::std::string::String {
        &mut self.Response
    }

    // Take field
    pub fn take_Response(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Response, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateAccountResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Response.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Response.is_empty() {
            os.write_string(1, &self.Response)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAccountResponse {
        CreateAccountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Response",
                |m: &CreateAccountResponse| { &m.Response },
                |m: &mut CreateAccountResponse| { &mut m.Response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateAccountResponse>(
                "CreateAccountResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateAccountResponse {
        static instance: ::protobuf::rt::LazyV2<CreateAccountResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateAccountResponse::new)
    }
}

impl ::protobuf::Clear for CreateAccountResponse {
    fn clear(&mut self) {
        self.Response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAccountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12proto/dSpace.proto\x12\x06dSpace\"1\n\x0bCallRequest\x12\x0e\n\x02\
    To\x18\x01\x20\x01(\tR\x02To\x12\x12\n\x04Data\x18\x02\x20\x01(\tR\x04Da\
    ta\"*\n\x0cCallResponse\x12\x1a\n\x08Response\x18\x01\x20\x01(\tR\x08Res\
    ponse\"1\n\x0bSendRequest\x12\x0e\n\x02To\x18\x01\x20\x01(\tR\x02To\x12\
    \x12\n\x04Data\x18\x02\x20\x01(\tR\x04Data\"*\n\x0cSendResponse\x12\x1a\
    \n\x08Response\x18\x01\x20\x01(\tR\x08Response\"(\n\x0eReceiptRequest\
    \x12\x16\n\x06TxHash\x18\x01\x20\x01(\tR\x06TxHash\"-\n\x0fReceiptRespon\
    se\x12\x1a\n\x08Response\x18\x01\x20\x01(\tR\x08Response\"&\n\x14CreateA\
    ccountRequest\x12\x0e\n\x02Id\x18\x01\x20\x01(\tR\x02Id\"3\n\x15CreateAc\
    countResponse\x12\x1a\n\x08Response\x18\x01\x20\x01(\tR\x08Response2\xff\
    \x01\n\rDSpaceService\x121\n\x04Call\x12\x13.dSpace.CallRequest\x1a\x14.\
    dSpace.CallResponse\x121\n\x04Send\x12\x13.dSpace.SendRequest\x1a\x14.dS\
    pace.SendResponse\x12:\n\x07Receipt\x12\x16.dSpace.ReceiptRequest\x1a\
    \x17.dSpace.ReceiptResponse\x12L\n\rCreateAccount\x12\x1c.dSpace.CreateA\
    ccountRequest\x1a\x1d.dSpace.CreateAccountResponseb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
